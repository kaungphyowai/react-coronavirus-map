{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","data","a","fetch","then","response","json","finalData","this","setState","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","length","map","Marker","position","countryInfo","lat","long","Popup","src","flag","alt","country","width","height","style","color","todayCases","active","critical","recovered","deaths","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAKMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHS,E,4FAMnB,4BAAAC,EAAA,4DACc,kDADd,SAE0BC,MADZ,mDACuBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAFjE,OAEQC,EAFR,OAGEC,KAAKC,SAAS,CAAER,KAAMM,IAHxB,gD,0EAKA,WACE,OACE,eAACG,EAAA,EAAD,CACEC,OAAQ,CAjBS,EACC,GAiBlBC,KAAM,EACNC,iBAAiB,EAHnB,UAKE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELR,KAAKR,MAAMC,KAAKgB,OAAS,GACxBT,KAAKR,MAAMC,KAAKiB,KAAI,SAAUjB,GAC5B,OACE,cAACkB,EAAA,EAAD,CACEC,SAAU,CAACnB,EAAKoB,YAAYC,IAAKrB,EAAKoB,YAAYE,MADpD,SAIE,eAACC,EAAA,EAAD,WACE,qBACEC,IAAKxB,EAAKoB,YAAYK,KACtBC,IAAK1B,EAAK2B,QAAU,QACpBC,MAAM,MACNC,OAAO,QAET,6BAAK7B,EAAK2B,UACV,qBAAIG,MAAO,CAAEC,MAAO,OAApB,2CACkB/B,EAAKgC,cAEvB,qBAAIF,MAAO,CAAEC,MAAO,OAApB,uCAAyC/B,EAAKiC,UAC9C,qBAAIH,MAAO,CAAEC,MAAO,OAApB,mCAA0C/B,EAAKkC,YAC/C,qBAAIJ,MAAO,CAAEC,MAAO,SAApB,0CACiB/B,EAAKmC,aAEtB,4DAAgBnC,EAAKoC,cAlBlBpC,EAAK2B,mB,GA5BRU,IAAMC,WAwDTzC,ICjDA0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13da981b.chunk.js","sourcesContent":["import React from \"react\";\nimport { TileLayer, MapContainer, Marker, Popup } from \"react-leaflet\";\nimport \"./App.css\";\nconst DEFAULT_LATITUDE = 0;\nconst DEFAULT_LONGITUDE = 0;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n  async componentDidMount() {\n    const url = \"https://corona.lmao.ninja/v3/covid-19/countries\";\n    const finalData = await fetch(url).then((response) => response.json());\n    this.setState({ data: finalData });\n  }\n  render() {\n    return (\n      <MapContainer\n        center={[DEFAULT_LATITUDE, DEFAULT_LONGITUDE]}\n        zoom={2}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {this.state.data.length > 0 &&\n          this.state.data.map(function (data) {\n            return (\n              <Marker\n                position={[data.countryInfo.lat, data.countryInfo.long]}\n                key={data.country}\n              >\n                <Popup>\n                  <img\n                    src={data.countryInfo.flag}\n                    alt={data.country + \" flag\"}\n                    width=\"200\"\n                    height=\"100\"\n                  />\n                  <h2>{data.country}</h2>\n                  <h3 style={{ color: \"red\" }}>\n                    TodayCasesüò∑Ô∏è: {data.todayCases}\n                  </h3>\n                  <h4 style={{ color: \"red\" }}>activeü§íÔ∏è: {data.active}</h4>\n                  <h4 style={{ color: \"red\" }}>critical‚ö†Ô∏è: {data.critical}</h4>\n                  <h4 style={{ color: \"green\" }}>\n                    recoveredüòçÔ∏è: {data.recovered}\n                  </h4>\n                  <h4>deathsüò•Ô∏è: {data.deaths}</h4>\n                </Popup>\n              </Marker>\n            );\n          })}\n      </MapContainer>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}